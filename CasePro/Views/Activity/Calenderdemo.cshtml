@using Newtonsoft.Json
@model List<Modelcasepro.RequestModel.ActivityViewModel>
@{
    ViewData["Title"] = "Calendar page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="https://cdn.syncfusion.com/ej2/material.css" rel="stylesheet">
<style>
    .ourtab_section .container {
        max-width: 100%;
        margin: 0;
        width: 100%;
    }

    .e-location-container, .e-all-day-container, .e-time-zone-container, .e-input-wrapper, .e-description-container, .e-location-icon {
        display: none;
    }

    #Description {
        display: none;
    }

    div#schedule {
        height: 780px !important;
    }

    .ourtab_section {
        padding: 40px 0;
    }

    .e-subject.e-field.e-dropdown {
        border: none;
    }

    .e-edit.e-control.e-btn.e-lib.e-flat.e-round.e-small.e-icon-btn {
        display: none;
    }

</style>

<div class="ourtab_section">
    <div class="container">
        <div id="schedule"></div>
    </div>

    <div id="addTaskModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close">&times;</span>
            <label for="assignee">Assignee:</label>
            <select id="assignee">
                <option value="rushi">Rushi</option>
                <option value="divya">Divya</option>
            </select>
            <label for="taskDate">Date:</label>
            <input type="date" id="taskDate">
            <button id="saveTaskBtn">Save</button>
        </div>
    </div>
</div>

<script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var eventListenerAttached = false;

        function attachEventListener() {
            if (!eventListenerAttached) {
                document.addEventListener('click', function (event) {
                    if (event.target.matches('.e-date-time-details.e-text-ellipsis')) {
                        const datetime = event.target.textContent;
                        const parsedDate = new Date(datetime);
                        parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset()); // Adjust for timezone offset
                        var formattedDate = parsedDate.toISOString().split('.')[0].replace('T', ' ').slice(0, -3);
                        var dateOnly = formattedDate.split(' ')[0];


                        let parentElement = event.target.parentElement;
                        while (parentElement && !parentElement.classList.contains('e-popup-content')) {
                            parentElement = parentElement.parentElement;
                        }
                        const locationDetails = parentElement.querySelector('.e-location-details.e-text-ellipsis');
                        if (locationDetails) {
                            var activityIdInput = locationDetails.querySelector('.hidclass');
                            var activityId = activityIdInput.value
                            window.location.href = '/Activity/CreateActivity/' + activityId;
                        } else {
                            let parentElement = event.target.parentElement;
                            while (parentElement && !parentElement.classList.contains('e-event-popup')) {
                                parentElement = parentElement.parentElement;
                            }
                            if (parentElement) {
                                const title = parentElement.querySelector('.e-subject.e-text-ellipsis').getAttribute('title');
                                window.location.href = '/Activity/CreateActivity/?title=' + title + '&formattedDate=' + dateOnly;
                            }

                        }
                    }
                    if (event.target && event.target.classList) {
                        if (event.target.classList.contains('e-work-cells')) {
                            console.log("test ohk");
                            popupWrapper = document.querySelector('.e-quick-popup-wrapper');
                            if (popupWrapper) {
                                inputField = popupWrapper.querySelector('.e-subject');
                                if (inputField) {
                                    dropdownHTML = '<select class="e-subject e-field e-dropdown" name ="Subject"">' +
                                        '<option value="">Select Activity Type</option>' +
                                        '<option value="Site Installation">Site Installation</option>' +
                                        '<option value="Site Uplift">Site Uplift</option>' +
                                        '<option value="Yard Loading">Yard Loading</option>' +
                                        '<option value="Yard Tipping">Yard Tipping</option>' +
                                        '</select>';

                                    dropdownElement = document.createElement('div');
                                    dropdownElement.className = 'e-input-group e-control-wrapper';
                                    dropdownElement.innerHTML = dropdownHTML;
                                    inputField.parentNode.removeChild(inputField);

                                    // Find the element with class .e-subject within the popup wrapper
                                    var spanElement = popupWrapper.querySelector('.e-input-group');

                                    // Check if the span element exists
                                    if (spanElement) {
                                        // Append the dropdown inside the span element
                                        spanElement.appendChild(dropdownElement.firstChild);
                                    } else {
                                        console.log("Element with class .e-input-group not found in the popup.");
                                    }
                                }
                            }

                        }
                    }
                });

                eventListenerAttached = true;
            }
        }


        attachEventListener();

        var activityData = @Html.Raw(JsonConvert.SerializeObject(Model));

        var scheduleObj = new ej.schedule.Schedule({
            width: '100%',
            height: '550px',
            views: ['Week'],
            selectedDate: new Date(),
            eventSettings: {
                dataSource: activityData.map(function (event) {
                    var startTime = new Date(event.DateRaised);
                    var endTime = new Date(event.DateRaised);
                    startTime.setHours(8, 0, 0);
                    endTime.setHours(19, 0, 0);
                    if (event.startTime && event.endTime) {
                        var startTimeParts = event.startTime.split(":");
                        var endTimeParts = event.endTime.split(":");
                        startTime.setHours(parseInt(startTimeParts[0]), parseInt(startTimeParts[1]));
                        endTime.setHours(parseInt(endTimeParts[0]), parseInt(endTimeParts[1]));
                    }

                    var hinput = '<input type="hidden" id="activityid" class="hidclass" name="activityId" value="' + event.Id + '" />';

                    return {
                        Subject: event.ActivitType,
                        StartTime: startTime,
                        EndTime: endTime,
                        Location: hinput,
                        IsAllDay: false
                    };
                }),
                allowDragAndDrop: true
            },
            actionBegin: function (args) {
                if (args.requestType === 'eventRemove') {
                    var event = args.data[0];
                    var eventId = $(event.Location).val();
                    deleteActivity(eventId);
                }
            },
            actionComplete: function (args) {
                if (args.requestType === 'eventChanged') {
                    draggedEvent = args.data[0].Location;
                    console.log(draggedEvent);
                    var eventId = $(draggedEvent).val();
                    var newDate = args.changedRecords[0].StartTime;
                    var parsedDate = new Date(newDate);
                    parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset()); // Adjust for timezone offset
                    var formattedDate = parsedDate.toISOString().split('.')[0].replace('T', ' ').slice(0, -3);
                    var dateOnly = formattedDate.split(' ')[0];
                    if (eventId > 0) {
                        updateEventDate(eventId, dateOnly);
                    }
                }

            }

        });

        scheduleObj.appendTo('#schedule');

        function deleteActivity(activityId) {
            $.ajax({
                url: '/Activity/CalendarActivityDelete',
                type: 'POST',
                data: { activityId: activityId },
                success: function (response) {
                    alert(response.errorMessage);
                    location.reload();
                },
                error: function (xhr, status, error) {
                    // Handle error
                }
            });
        }

        function updateEventDate(eventId, dateOnly) {
            $.ajax({
                url: '/Activity/EditCalendarDragDrop',
                type: 'POST',
                data: { eventId: eventId, newDate: dateOnly },
                success: function (response) {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    alert("An error occurred while updating the event date.");
                }
            });
        }

        var modal = document.getElementById('addTaskModal');
        var closeModal = document.querySelector('.close');
        var saveTaskBtn = document.getElementById('saveTaskBtn');

        closeModal.addEventListener('click', function () {
            modal.style.display = 'none';
        });

        window.addEventListener('click', function (e) {
            if (e.target == modal) {
                modal.style.display = 'none';
            }
        });

        saveTaskBtn.addEventListener('click', function () {
            var assignee = document.getElementById('assignee').value;
            var taskDate = document.getElementById('taskDate').value;
            // Logic to save task using Syncfusion Scheduler API
            document.querySelector('.').appendChild(hiddenInput);
            modal.style.display = 'none';
        });
    });
</script>
